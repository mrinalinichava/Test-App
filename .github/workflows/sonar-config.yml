# This is a workflow to automate deployment for ecom APIs
name: Deployment Pipeline

on:
  # Triggers the workflow on push or pull request events but only for the master branch
  pull_request:
    branches: [main]
    types: [ opened ]
# Allows you to run this workflow manually from the Actions tab
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  PreJob-Requirement:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    outputs:
      TestApp1: ${{steps.check.outputs.flag1}}
      TestApp2: ${{steps.check.outputs.flag2}}
      TestApp3: ${{steps.check.outputs.flag3}}
      DEPLOYMENT_ENV: ${{env.DEPLOYMENT_ENV}}
      MULE_ENV: ${{env.MULE_ENV}}
      client_id: ${{env.client_id}}
      client_secret: ${{env.client_secret}}
      
# Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: checkout_of_repository
        uses: actions/checkout@v2
      - name: file_changes
        id: file_changes
        uses: dorny/paths-filter@v2
        with:
         filters: |
           testApp1:
             - test-app1/**
           testApp2:
             - test-app2/**
           testApp3:
             - test-app3/**
      - name: check_for_APIchange
        id: check
        env:
          App1: ${{steps.file_changes.outputs.testApp1}}
          App2: ${{steps.file_changes.outputs.testApp2}}
          App3: ${{steps.file_changes.outputs.testApp3}}
        run: |
          echo " Change in Experience API $App1"
          echo " Change in Process API $App2"
          echo " Change in System API $App3"
          echo "::set-output name=flag1::$App1"
          echo "::set-output name=flag2::$App2"
          echo "::set-output name=flag3::$App3"
# Experience API job
  Test-App1-Job:
    needs: [ PreJob-Requirement ]
    if: ${{needs.PreJob-Requirement.outputs.TestApp1=='true'}}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: SonarQube Scan
      uses: kitabisa/sonarqube-action@v1.1.0
      with:
        host: "server-url"
        login: "key"
        projectBaseDir: ./test-app1
        projectKey: "proj-1"
        projectName: "name-1"
#         projectVersion: "v0.0.1"
      env:
          # Needed to get some information about the pull request, if any
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # SonarCloud access token should be generated from https://sonarcloud.io/account/security/
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  Test-App2-Job:
    needs: [ PreJob-Requirement ]
    if: ${{needs.PreJob-Requirement.outputs.TestApp1=='true'}}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: SonarQube Scan
      uses: kitabisa/sonarqube-action@v1.1.0
      with:
        host: "server-url"
        login: "key"
        projectBaseDir: ./test-app2
        projectKey: "proj-2"
        projectName: "name-2"
#         projectVersion: "v0.0.1"
      env:
          # Needed to get some information about the pull request, if any
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # SonarCloud access token should be generated from https://sonarcloud.io/account/security/
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}


  Test-App3-Job:
    needs: [ PreJob-Requirement ]
    if: ${{needs.PreJob-Requirement.outputs.TestApp1=='true'}}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: SonarQube Scan
      uses: kitabisa/sonarqube-action@v1.1.0
      with:
        host: "server-url"
        login: "key"
        projectBaseDir: ./test-app3
        projectKey: "proj-3"
        projectName: "name-3"
#         projectVersion: "v0.0.1"
      env:
          # Needed to get some information about the pull request, if any
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # SonarCloud access token should be generated from https://sonarcloud.io/account/security/
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
